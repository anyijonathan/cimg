{"version":3,"file":"static/js/231.9b64e983.chunk.js","mappings":"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","sources":["components/Button.js","components/FormInput.js","components/FormSelect.js","components/Notification.js","components/Searchbar.js","pages/AdminPages/VendorTelco.js"],"sourcesContent":["import { Spinner } from 'flowbite-react';\r\nimport React from 'react'\r\n\r\nconst Button = \r\n  ({ \r\n    type = 'submit',\r\n    className,\r\n    disabled,\r\n    onClick,\r\n    icon,\r\n    isLoading,\r\n    children,\r\n    loaderText\r\n  }) => {\r\n \r\n  return (\r\n    <button\r\n      className = {       \r\n        `bg-[linear-gradient(89.92deg,_#60088C_0.07%,_#A11E90_92.22%)] w-full h-12 border border-purple-secondary text-white text-sm rounded font-circular-std outline-none focus:border-purple-secondary focus:ring-purple-200  block pt-4 pb-6 px-16 ease-in-out duration-150 \r\n          ${disabled && 'opacity-60'} ` + className\r\n      }\r\n      type= {type}\r\n      onClick = {onClick}\r\n      disabled = {disabled ? disabled : false}   \r\n    >\r\n      {icon && <div>{icon}</div>}\r\n            {children}\r\n            {isLoading}\r\n \r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button","import React from \"react\";\r\n\r\nconst FormInput = ({\r\n  label,\r\n  endingLabel,\r\n  endingLabelLink,\r\n  placeholder,\r\n  className = \"\",\r\n  value,\r\n  id,\r\n  onChange,\r\n  onBlur,\r\n  type,\r\n  name,\r\n  autoComplete,\r\n  inputMode,\r\n  maxLength,\r\n  required,\r\n  readOnly,\r\n  children,\r\n}) => {\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"flex justify-between\">\r\n        {label && (\r\n          <label\r\n            htmlFor={id}\r\n            className={`mb-3 text-sm font-medium font-circular-std text-black-secondary`}\r\n          >\r\n            {\" \"}\r\n            {label}\r\n          </label>\r\n        )}\r\n\r\n        {endingLabel && (\r\n          <a\r\n            href={endingLabelLink}\r\n            className={`mb-3 text-sm text-right font-medium font-circular-std text-purple-secondary opacity-70`}\r\n          >\r\n            {\" \"}\r\n            {endingLabel}\r\n          </a>\r\n        )}\r\n      </div>\r\n      <input\r\n        id={id}\r\n        className={\r\n          `w-full md:w-[27.25rem] h-12 border border-purple-secondary text-black-40 text-sm rounded outline-none focus:border-purple-secondary focus:ring-purple-200  block py-4 pl-4 pr-[0.625rem]` +\r\n          className\r\n        }\r\n        placeholder={placeholder || \"\"}\r\n        value={value}\r\n        onChange={onChange}\r\n        onBlur={onBlur}\r\n        name={name}\r\n        type={type}\r\n        autoComplete={autoComplete || \"\"}\r\n        inputMode={inputMode}\r\n        maxLength={maxLength}\r\n        required={required}\r\n        readOnly={readOnly}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import React from \"react\";\r\n\r\nconst FormSelect = ({\r\n\tonChange,\r\n\tid,\r\n\tlabel,\r\n\ttype,\r\n\toptions,\r\n\tvalue,\r\n\tdefaultValue,\r\n\tclassName,\r\n}) => {\r\n\treturn (\r\n\t\t<div className=\"font-circular-std\">\r\n\t\t\t{label && (\r\n\t\t\t\t<label className=\"block mb-4 text-sm font-medium text-black-secondary\">\r\n\t\t\t\t\t{label}\r\n\t\t\t\t</label>\r\n\t\t\t)}\r\n\r\n\t\t\t<select\r\n\t\t\t\tid={id}\r\n\t\t\t\tclassName={\r\n\t\t\t\t\t`border border-opacity-50 border-black-40 text-black-40 text-sm rounded outline-none focus:border-black-40 focus:border-opacity-50 focus:ring-gray-200 block pl-4 pr-[0.625rem]` +\r\n\t\t\t\t\tclassName\r\n\t\t\t\t}\r\n\t\t\t\ttype={type}\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tdefaultValue={defaultValue}\r\n\t\t\t\t\r\n\t\t\t>\r\n\t\t\t\t{options &&\r\n\t\t\t\t\toptions.map((options) => (\r\n\t\t\t\t\t\t<option key={options.id} value={options.value}>\r\n\t\t\t\t\t\t\t{options.name}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t))}\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default FormSelect;\r\n","import React from 'react'\r\nimport { NotificationIcon } from '../icons'\r\n\r\nconst Notification = ({statusColor, status, notificationText, className }) => {\r\n  return (\r\n    <div className={`mb-4 md:mb-0 md:absolute md:left-[77%] md:top-[10%] ` + className}>\r\n\r\n      {(status === \"success\") && (\r\n        <div className={`w-[60%] h-10 md:h-12 md:w-[21.8125rem] justify-center flex bg-green-primary items-center`}>\r\n          <NotificationIcon />\r\n          <p className='font-medium text-base md:text-xs text-white pl-6'>{notificationText}</p>\r\n        </div>\r\n      )}\r\n\r\n    {(status === \"failure\") && (\r\n      <div className={`w-full px-4 py-2 h-10 md:h-12 md:w-[21.8125rem] justify-center flex bg-red-primary items-center`}>\r\n        <NotificationIcon />\r\n        <p className='font-medium text-base md:text-xs text-white pl-6'>{notificationText}</p>\r\n      </div>\r\n    )}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\nimport { SearchIcon } from '../icons'\r\n\r\nconst Searchbar = ({placeholder, id, onChange, value}) => {\r\n  \r\n  return (\r\n    <div>\r\n      <div className=\"flex items-center pl-3\">\r\n        {/* <SearchIcon className='absolute ml-2' />  */}\r\n        <SearchIcon className='relative left-6' /> \r\n        <input value={value} type=\"text\" id={id} onChange = {onChange} className=\"w-80 h-11 rounded opacity-60 border border-gray-300 text-black-40 text-sm focus:ring-gray-50 focus:border-gray-300 outline-none block w-full p-4 pl-8\" placeholder={placeholder} />\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Searchbar","import React, {useEffect, useState} from 'react'\r\nimport { CreateVendorTelcoMap,  getAllApprovedMapping, setApprovedList,SwitchTelcoToVendor } from '../../Redux/Slices/mappingSlice';\r\nimport {userSelector } from '../../Redux/Slices/authSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Notification from '../../components/Notification';\r\nimport Searchbar from '../../components/Searchbar';\r\nimport FormSelect from '../../components/FormSelect';\r\nimport FormInput from '../../components/FormInput';\r\nimport { Modal } from 'flowbite-react';\r\nimport { getAllActiveVendors } from '../../Redux/Slices/vendorSlice';\r\nimport { getAllActiveTelcos } from '../../Redux/Slices/telcoSlice';\r\nimport Button from '../../components/Button';\r\n\r\n\r\nconst VendorTelco = () => {\r\n\r\n  let telcoType = [\r\n    {\r\n      id: 0,\r\n      value: \"\",\r\n      name: \"Select Telco\",\r\n    },\r\n  ];\r\n\r\n  let vendorType = [\r\n    {\r\n      id: 0,\r\n      value: \"\",\r\n      name: \"Select Vendor\",\r\n    },\r\n\r\n  ];\r\n\r\n  const dispatch = useDispatch();\r\n  const {emailAddress, userRole} = useSelector(userSelector)\r\n\r\n  let ListState = useSelector( (state) => {\r\n    return state[\"mapping\"]\r\n   })\r\n\r\n  \r\n\r\n   const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)\r\n   const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false)\r\n   const [notificationText, setNotificationText] = useState(\"\")\r\n   const [status, setStatus] = useState(\"\");\r\n   const [mappingList, setMappingList] = useState([])\r\n   const [isLoading, setIsLoading] = useState(false)\r\n   const [disabled, setDisabled] = useState(false)\r\n \r\n   const [vendorOptions, setVendorOptions] = useState(vendorType);\r\n   const [telcoOptions, setTelcoOptions] = useState(telcoType);\r\n   const [vendorId, setVendorId] = useState()\r\n   const [telcoId, setTelcoId] = useState ()\r\n   const [telcoName, setTelcoName] = useState(\"\")\r\n \r\n \r\n\r\n   \r\n  function openMapModal() {\r\n    setVendorId(\"\")\r\n    setTelcoId(\"\")\r\n    setIsCreateModalOpen(true)\r\n  }\r\n\r\n  function closeMapModal() {\r\n    setIsCreateModalOpen(false)\r\n  }\r\n\r\n  function openUpdateModal(id, telcoName) {\r\n    setIsUpdateModalOpen(true)\r\n    setTelcoId(id)\r\n    setTelcoName(telcoName)\r\n  }\r\n\r\n  function closeUpdateModal() {\r\n    setIsUpdateModalOpen(false)\r\n  }\r\n\r\n   const handleVendorChange = (e) => {\r\n    let { value } = e.target;\r\n     setVendorId(value);\r\n  };\r\n\r\n  const handleTelcoChange = (e) => {\r\n    let { value } = e.target;\r\n     setTelcoId(value);\r\n  };\r\n \r\n \r\n  const createMap = async () =>{\r\n    const data = {\r\n      \"telcoId\": telcoId,\r\n      \"vendorId\": vendorId\r\n  }\r\n    try{\r\n      setDisabled(true)\r\n      setIsLoading(true)\r\n \r\n      let response =  await CreateVendorTelcoMap(data, emailAddress, userRole)\r\n      if (response.code === \"00\"){\r\n       setStatus(\"success\")\r\n       setNotificationText(\"Telco/vendor map created successfully and sent to admin for approval\")\r\n      setDisabled(false)\r\n      setIsLoading(false)\r\n      setIsCreateModalOpen(false)\r\n \r\n\r\n      setTimeout(() => {\r\n        setStatus(\"\")\r\n        setNotificationText(\"\")\r\n        setVendorId(\"\")\r\n        setTelcoId(\"\")\r\n      }, 3000); \r\n    }\r\n    else {\r\n      setStatus(\"failure\")\r\n      setNotificationText(response.description)\r\n      setDisabled(false)\r\n      setIsLoading(false)\r\n    }\r\n    \r\n  }\r\n\r\n    catch(error){\r\n      setDisabled(false)\r\n      setIsLoading(false)\r\n      setStatus(\"failure\")\r\n      setNotificationText(\"an error occured, please try again\")\r\n    }\r\n  } \r\n\r\n  const switchVendor = async () =>{\r\n    const data = {\r\n      \"telcoId\": telcoId,\r\n      \"vendorId\": vendorId\r\n  }\r\n    try{\r\n      setDisabled(true)\r\n      setIsLoading(true)\r\n \r\n      let response =  await SwitchTelcoToVendor(data, emailAddress, userRole)\r\n      setStatus(\"success\")\r\n      setNotificationText(\"vendor switch successful and sent to admin for approval\")\r\n      setDisabled(false)\r\n      setIsLoading(false)\r\n      setIsUpdateModalOpen(false)\r\n \r\n\r\n      setTimeout(() => {\r\n        setStatus(\"\")\r\n        setNotificationText(\"\")\r\n        setVendorId(\"\")\r\n        setTelcoId(\"\")\r\n      }, 4000);\r\n    }\r\n\r\n  \r\n    catch(error){\r\n      setDisabled(false)\r\n      setIsLoading(false)\r\n      setStatus(\"failure\")\r\n      setNotificationText(\"an error occured, please try again\")\r\n    }\r\n  }\r\n\r\n  const fetchVendorList = async () => {\r\n    let newOptions = {};\r\n    let newVendorOptions = [...vendorType];\r\n    try {\r\n      let responseData = await getAllActiveVendors(emailAddress, userRole);\r\n      responseData.dataList.filter((vendor) => {\r\n        newOptions.id = vendor.id;\r\n        newOptions.name = vendor.vendorName;\r\n        newOptions.value = vendor.id;\r\n        newVendorOptions.push(newOptions);\r\n        newOptions = {};\r\n        return newVendorOptions;\r\n      });\r\n      setVendorOptions(newVendorOptions);\r\n    } catch (error) {\r\n      setStatus(\"failure\");\r\n      setNotificationText(\"error fetching vendor list\");\r\n    }\r\n  };\r\n\r\n  const fetchTelcoList = async () => {\r\n    let newOptions = {};\r\n    let newTelcoOptions = [...telcoType];\r\n    try {\r\n      let responseData = await getAllActiveTelcos();\r\n      responseData.dataList.filter((telco) => {\r\n        newOptions.id = telco.id;\r\n        newOptions.name = telco.telcoName;\r\n        newOptions.value = telco.id;\r\n        newTelcoOptions.push(newOptions);\r\n        newOptions = {};\r\n        return newTelcoOptions;\r\n      });\r\n      setTelcoOptions(newTelcoOptions);\r\n    } catch (error) {\r\n      setStatus(\"failure\");\r\n      setNotificationText(\"error fetching telco list\");\r\n    }\r\n  };\r\n\r\n\r\n   const getCurrentMappings = async ()=>{\r\n    try{\r\n  const response = await getAllApprovedMapping(emailAddress, userRole)\r\n  if(response.code === \"00\"){\r\n    setMappingList(response.dataList)\r\n    dispatch(setApprovedList(response.dataList))\r\n  } else{\r\n    setStatus(\"failure\")\r\n    setNotificationText(\"error fetching current mappings\")\r\n  }\r\n\r\n    }\r\n\r\n    catch(error){\r\n\r\n    }\r\n\r\n  } \r\n \r\n  useEffect(() => {\r\n    getCurrentMappings()\r\n    fetchVendorList()\r\n    fetchTelcoList()\r\n    }, [])\r\n    \r\n\r\n\r\n\r\n \r\n\r\n\r\n  return (\r\n    <div className='font-circular-std'>\r\n       <Notification  notificationText={notificationText} status = {status} />\r\n\r\n       \r\n    {/* ---------------------------------------------- Modals ------------------------------------------- */}\r\n<Modal\r\n    show= {isCreateModalOpen}\r\n    onClose={closeMapModal}\r\n    popup = \"true\"\r\n    size = \"lg\"\r\n    position=\"center\"\r\n  >\r\n    <Modal.Header >\r\n      <div className='p-6'>\r\n    <h3 className='w-[90%] text-lg font-bold text-black-secondary'>Create a new mapping</h3>\r\n     </div>\r\n     <div className='md:w-[27.75rem] pb-10'>\r\n     <hr />\r\n     </div>\r\n    </Modal.Header>\r\n\r\n    <Modal.Body>\r\n      <div className=\"space-y-6\">\r\n   <FormSelect className= \"w-full md:w-[27.25rem] h-12\" label= \"Select a Telco\" onChange={handleTelcoChange} options={telcoOptions} value = {telcoId} />\r\n   <FormSelect className= \"w-full md:w-[27.25rem] h-12\" label= \"Select a Vendor\" onChange={handleVendorChange} options={vendorOptions} value = {vendorId} />\r\n      </div>\r\n    </Modal.Body>\r\n    <Modal.Footer>\r\n      <div className='flex justify-between w-full'>\r\n      <Button isLoading={isLoading} disabled= {disabled}  onClick = {createMap} >Create Mapping</Button>\r\n\r\n      </div>\r\n    </Modal.Footer>\r\n  </Modal>\r\n\r\n{/* ------------------------------------------------------------------------------------------------------------------------------- */}\r\n\r\n<Modal\r\n        show={isUpdateModalOpen}\r\n        onClose={closeUpdateModal}\r\n        popup={true}\r\n        size=\"lg\"\r\n        position=\"center\"\r\n      >\r\n        <Modal.Header>\r\n          <div className=\"p-6\">\r\n            <h3 className=\"w-[90%] text-lg font-bold text-black-secondary\">\r\n              Update Mapping\r\n            </h3>\r\n          </div>\r\n          <div className=\"md:w-[27.75rem] pb-10\">\r\n            <hr />\r\n          </div>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <div className=\"space-y-6\">\r\n            <FormInput\r\n              className=\"w-full md:w-[27.25rem] h-12 mb-12 text-black-40\"\r\n              label= \"Telco Name\"\r\n              value={telcoName || \"\"}\r\n              readOnly\r\n               />\r\n\r\n         <FormSelect className= \"w-full md:w-[27.25rem] h-12 mt-4\" label= \"Select a Vendor\" value={vendorId} onChange={handleVendorChange} options={vendorOptions} />\r\n\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <div className=\"flex justify-between w-full\">\r\n            <Button\r\n              isLoading={isLoading}\r\n              disabled={disabled}\r\n              onClick = {switchVendor}\r\n            >\r\n             Update Mapping\r\n            </Button>\r\n          </div>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n {/*   ------------------------------------------- Modals ----------------------------------------------------  */}\r\n\r\n\r\n      <h2 className='text-xl font-bold text-black-secondary pb-9'>Telco/Vendor Mapping</h2>\r\n      <div className='col-span-6 h-[27.1875rem]'>\r\n<div className='flex justify-between w-full bg-white h-[4.8125rem] items-center px-6'>\r\n{/*      <div className='flex'>\r\n  <Searchbar placeholder= \"search vendor\" />\r\n   </div>  */}\r\n <div className='w-full'>\r\n <div className='flex justify-end pr-4'>\r\n <button onClick={openMapModal} className='p-3 border border-purple-secondary rounded font-circular-std outline-none focus:border-purple-secondary focus:ring-purple-200 ease-in-out duration-150'><p className='linear-gradient-text text-sm font-normal'>Create a new mapping</p></button>\r\n   </div>\r\n </div>\r\n</div>\r\n<div className=\"overflow-x-auto relative bg-white pl-6 pr-14 pb-2 rounded-lg\">\r\n<table className=\"w-full text-sm text-left\">\r\n        <thead className=\"text-sm text-black-primary bg-dashboard-background\">\r\n        <tr>\r\n                <th scope=\"col\" className=\"py-3 px-6\">\r\n                Telco name\r\n                </th>\r\n                <th scope=\"col\" className=\"py-3 px-6\">\r\n                Vendor\r\n                </th>\r\n                <th scope=\"col\" className=\"py-3 px-6\">\r\n                Actions\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n           {ListState.approvedList.map((mapping, i) => (\r\n          <tr key={i} className=\"bg-white border-b py-4 px-6\">\r\n          <td className=\"py-6 px-6 font-sm text-black-secondary whitespace-nowrap\">\r\n            {mapping.telcoName}\r\n              </td>\r\n              <td className=\"py-6 px-6 text-black-secondary\">\r\n             { mapping.vendorName}\r\n              </td>\r\n              <td className=\"py-6 px-6 text-red-primary\">  \r\n                  <button className='w-32 h-11 p-3 border border-purple-secondary rounded font-circular-std outline-none focus:border-purple-secondary focus:ring-purple-200 ease-in-out duration-150' onClick={()=>{openUpdateModal(mapping.telcoId, mapping.telcoName)}}><p className='linear-gradient-text text-sm font-normal'>Update</p></button>\r\n              </td>\r\n          \r\n          </tr>\r\n            \r\n\r\n            ))} \r\n      \r\n        </tbody>\r\n    </table> \r\n</div>\r\n\r\n</div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default VendorTelco"],"names":["type","className","disabled","onClick","icon","isLoading","children","loaderText","label","endingLabel","endingLabelLink","placeholder","value","id","onChange","onBlur","name","autoComplete","inputMode","maxLength","required","readOnly","htmlFor","href","options","defaultValue","map","statusColor","status","notificationText","NotificationIcon","SearchIcon","telcoType","vendorType","dispatch","useDispatch","useSelector","userSelector","emailAddress","userRole","ListState","state","useState","isCreateModalOpen","setIsCreateModalOpen","isUpdateModalOpen","setIsUpdateModalOpen","setNotificationText","setStatus","setMappingList","setIsLoading","setDisabled","vendorOptions","setVendorOptions","telcoOptions","setTelcoOptions","vendorId","setVendorId","telcoId","setTelcoId","telcoName","setTelcoName","handleVendorChange","e","target","createMap","data","CreateVendorTelcoMap","response","code","setTimeout","description","switchVendor","SwitchTelcoToVendor","fetchVendorList","newOptions","newVendorOptions","getAllActiveVendors","dataList","filter","vendor","vendorName","push","fetchTelcoList","newTelcoOptions","getAllActiveTelcos","telco","getCurrentMappings","getAllApprovedMapping","setApprovedList","useEffect","show","onClose","popup","size","position","scope","approvedList","mapping","i","openUpdateModal"],"sourceRoot":""}